<h1>Perl Object ?</h1>

<img src="/images/object.jpg" style="border: 0">

===

<h2>Perl Object ?</h2>
<p><p>

<table>
<tr><td>
<img src="/images/questions.jpg" width="300">
<td>
<ul>
<li>Why ?
<li>When ?
<li>How ?
</ul>
</table>

===

<h2>Without Objects</h2>

we manipulate scalars, arrays, hashes...
<p>
<table>
<tr><td>
<img src="/images/perl-base.png">
<td>
<pre class="prettyprint" style="font-size: 30px;">
$hash = {
	key => 42, 
	another => { 
		one  => 43,
		deep => {
			here => {
				you => {
					can => 'find me'
				}
			}
		},
		str  => "Data value" 
	},
	elts => [ 8, 25, 37, 64 ]
};
</pre>
</table>
<p>
This lead to store data in <i>/ugly/</i> hashes 

===
<h2>Problems with this approach :</h2>

<p>you need to know the <b>"exact key"</b> to use... 

<p>
<pre class="prettyprint" style="font-size: 30px;">
$hash->{key} = 42;
$hash->{anotherlevel}->{key} = "value";
$hash->{where}->{can}{be}{mykey} = { it => 's there' };
</pre>

<p><br>
<img src="/images/search.png" width=250>
<p><br>
deep research into the code...<br>
or need to dump huge hash

===
<h2>You can s/confound/mispell/ key name</h2>
somewhere
<pre class="prettyprint" style="font-size: 30px;">
sub method {
	my $h = shift;
	$h->{key} = 42;
}
</pre>
<br>
then use later
<pre class="prettyprint" style="font-size: 30px;">
...
	$h->{keys}++ and $h->{kyes} = 51;
...
</pre>
<br>
<img src="/images/no-warning.jpg" width=250>

===
<div>
You cannot change the key name<br>
or storage level
</div>

<pre class="prettyprint" style="font-size: 30px;">
$hash->{current_key} = 42;
</pre>

<p><br>
cannot become neither
<br>
<pre class="prettyprint" style="font-size: 30px;">
$hash->{updated_key} = 42;
</pre>
<p>
nor
<br>
<pre class="prettyprint" style="font-size: 30px;">
$hash->{better}->{updatekey} = 42;
</pre>
<table>
<tr><td>
<img src="/images/source-code.jpg">
<td>
without updating the full code !
</table>
===

You cannot control <b>life cycle</b> of an attribute : 
<table>
<tr>
<td>
<img src="/images/hooks.jpg" width=300>
<td>
<ul>
<li>on create
<li>on update
<li>before, after, around 
<li>hooks : innner, augment...
</ul>
</table>

<pre class="prettyprint" style="font-size: 30px;">
sub somewhere {
	...
	$hash->{mykey} = 42 and additionnal_operation; 
	...
}

sub otherplace {
	...
	$hash->{mykey} = 43 and additionnal_operation; 
	...
}
</pre>

===

<p>
you would need an <b>accessor</b>
<p>

<table>
<tr>
<td>
<img src="/images/oneway.jpg">
<td>
<pre class="prettyprint" style="font-size: 30px;">
sub mykey {
	my ($self, $value) = @_;

	if (defined $value) {
		$self->{_mykey} = $value;
		$self->additionnal_operation();
	}
	
	$self->{_mykey};
}
</pre>
</table>
<p><p><br>
<i>it should be the only single way<br> 
to access to this piece of data<i>

===

<h2>Writing documentation</h2>
<p>... is difficult
<pre class="prettyprint" style="font-size: 30px;">Please use $object->{level1}{level2} to access the expected value !</pre>

rather than 
<pre class="prettyprint" style="font-size: 30px;">
=pod
=head attribute
Parameters : attribute value ( optional )
Description : attribute method can be used to read or update it ! 
Returns : current value
Usage :
	# use as reader
	my $read = $object->attribute();
	# use as writter
	$object->attribute($new_value);
=cut

	sub attribute {
		... some code there ( or not ! )
	}
</pre>

===

<h1>What is object ?</h1>

<img src="/images/20objects.jpg" style="border: 0">

<p>
Small piece of code
<ul>
<li> functions
<li> data
</ul>

=== 

<h2>Why object / module ?</h2>

<br>
<ul>
<li> code is organized
<li> Object is DRY, Lazy & Fun
<li> code is easier to read / share
<li> design & development can be dissociate
<li> ( much ) more easier to test 
<li> provides fault containment 
<li> reduce code maintenance
<li> simplify product evolution
<li> documentation is easier
</ul>

=== 
<h3>Code organization</h3>

<table>
<tr>
<td>
<img src="/images/folder-cabinet.jpg">
<td>
<pre>
Object
|__ Human
|     |___ Male
|     |___ Female
|
|__ Transport
      |___ Car
      |___ Plane
      |___ Bicycle

</pre>
</table>

===
<h2>DRY : Do not Repeat Yourself</h2>

<table>
<tr><td><img src="/images/dry.jpg">
<td>
<ul>
<li> inheritance help you factorize your code 
<li> roles ( ~ interface )
</ul>
</table>
<pre class="prettyprint" style="font-size: 30px;">
  package Document::Page;
  sub create {
      my $self = shift;
      ...   
      do_some_stuff; # inner();
      ...
  }

  package Document::Special;
  extends 'Document::Page';
  augment 'create' => sub {
      my $self = shift;
      $self->do_some_extra_stuff;
  };
</pre>

===
<h2>Lazy</h2>
<table>
<tr><td><img src="/images/lazy.jpg">
<td>
<ul>
<li> provide "new" method
<li> provide accessors
<li> parameters validation :<br>types, optional, default value...
</ul>
</table>
<pre class="prettyprint" style="font-size: 30px;">
  package Person;
  use Moose; # or any other object module

  has 'age'    => ( is => 'rw', isa => 'Int', default => 42 );
  
  package main;
  my $p = Person->new() or Person->new(age => 64);
  $current_age = $p->age();
  $p->age($new_age);
  
</pre>

===
<h2>Type checking</h2>
<pre class="prettyprint" style="font-size: 30px;">
  package Person;
  use Try::Tiny;
  use Moose;
  use Moose::Util::TypeConstraints;

  subtype 'Sex'
      => as 'Str'
      => where { $_ =~ m{^[mf]$}s };

  has 'sex'    => ( is => 'ro', isa => 'Sex', required =>  1 );
  has 'age'    => ( is => 'rw', isa => 'Int', default  => 42 );	 

  my $person = Person->new( sex => 'm', age => 45 );

  try {
		Person->new( sex => 'unknon' );
  } catch {
		warn "Error has been detected";
  };

</pre>

===
<h2>Coercion</h2>

<pre class="prettyprint" style="font-size: 25px;">
package cPanel::Types::Date;
use Moose::Util::TypeConstraints; use DateTime; # ...

subtype 'cPanel:Day' => as 'DateTime';
coerce  'cPanel:Day' => from 'Str' => via {
    /^\d{4}\d{2}\d{2}$/ or croak "Unable to coerce '$_' into a valid date";
    my $dt = DateTime::Format::DateParse->parse_datetime($_);
    $dt->set_formatter(DateTime::Format::Strptime->new(pattern => '%Y%m%d'));
    $dt->set_time_zone('local');
    return $dt;
};

package Test::Coerce;
use Moose; use cPanel::Types::Date;

has day => (
	is  => 'rw',
	isa => 'cPanel:Day',
	coerce => 1
);
package main;
my $d1 = Test::Coerce->new(day => DateTime->now());
my $d2 = Test::Coerce->new(day => '20111130');
isa_ok $d2->day, 'DateTime', 'day is coerced to a DateTime object';
</pre>

=== 

<h2>Which object library to choose ? </h2>

<table>
<tr>
<td>
<img src="/images/jolly-moose-cartoon.gif">
<td>
<div>
<ul>
<li> Moose
<li> Mouse
<li> Moo
<li> Mo
<li> M
<li> ...
<li> fields
<li> Object::Tiny(::XS)
<li> Class::XSAccessor
<li> write your own simple Object ?
</ul>
</div>
</table>
and sometimes <b>none</none> !

===
<h2>Moose : the fat one !</h2>
<table>
<tr><td><img src="/images/fat.jpg"><br>
<i>fat but so good..</i>
<td>
Advantages :
<ul>
<li> the most advanced 
<li> large ecosystem of extensions : MooseX : <br>
validate, getopt, singleton, types...
<li> can use advanced types and coercion methods
<li> hooks : before, after, inner, augment...
</ul>

Disadvantages :
<ul>
<li> startup time
<li> memory usage
<li> dependencies...
</ul>
</table>
===
<h2>Moo : the light one ! by MST</h2>

<ul>
<li> same goal as Mouse : provide a Moose lighter
<li> but provide "as little as possible" : minimalist
</ul>

<pre class="prettyprint" style="font-size: 30px;">
package Demo::Moo;
use Moo;
with 'Some::Role';
has bar => (
	is => 'rw', 
	isa => sub { $_[0] =~ /^[+-]?\d+$/ },
	coerce => quote_sub q{ $_[0] + 1 unless $_[0] % 2 },
	lazy => 1,
);
</pre>

Start with Moo and if you need more, switch to Mouse or Moose 
<ul>
<li> can use only one role at a time
<li> not available : super, override, inner, augment
<li> no initializer 
</ul>
===
<h2>fields : compile-time class</h2>

Still want to keep using [better] hash ?

<pre class="prettyprint" style="font-size: 30px;">
package Animal::Sounds;
use fields qw(cat dog bird);

sub new {
    my Animal::Sounds $self = shift;
    $self = fields::new($self) unless ref $self;
    return $self;
}

package main;
my Animal::Sounds $sound = Animal::Sounds->new(); # typed lexical
$sound->{cat}   = 'mmmm'; # ok
$sound->{horse} = 'hiia'; # generates compile-time error  
# No such class field "horse" in variable $sound of type Animal::Sounds
</pre>

<p><p>
Objects ( typed ) with named fields are as compact and as fast arrays to access

===

<h2>fields</h2>

be careful in production ( perl >= 5.009 )

<table>
<tr>
<td>
<pre class="prettyprint" style="font-size: 25px;">


121	13.3ms
122	7.62ms
123	20.9ms
124	35.2ms
125	
126	
127	6.71s


128	61.6ms
129
</pre>
<td>
<pre class="prettyprint" style="font-size: 25px;">
# extract from field.pm
*new = sub {
	my $class = shift;
	$class = ref $class if ref $class;
	require Hash::Util;
	my $self = bless {}, $class;
					
	# The lock_keys() prototype won't work since we require Hash::Util :(
	&Hash::Util::lock_keys(\%$self, _accessible_keys($class));
    # spent  6.00s making 20172 calls to Hash::Util::lock_keys, avg 297us/call
    # spent   710ms making 20172 calls to fields::_accessible_keys, avg 35us/call
	return $self;
}
</pre>
</table>

<p>
<b>Trick :</b> mock *fields::new when current env is set to production 

===
<h2>Object::Tiny[::XS] : The fast one !</h2>

<ul>
<li> use Class::XSAccessor
<li> fast, easy but extremely limited
<li> only implement getters
<li> do not provide setters
</ul>

<pre class="prettyprint" style="font-size: 30px;">
package MyClass;
use Object::Tiny::XS qw{ list of attributes };
1;
  
package main;
my $object = MyClass->new( list => [ 42, 51 ], of => 'numbers' );
say join(',', @{$object->list}, $object->of);
eval { $object->attributes( 63 ); } or warn "Cannot update attribute value !";
</pre>
 
===
<h2>Writing your own object module ?</h2>
<pre class="prettyprint" style="font-size: 25px;">
package cPanel::Object; # Inspired from Object::Tiny
sub import {
    return unless shift eq __PACKAGE__;
    my $pkg = caller;
    @{"${pkg}::ISA"} = 'cPanel::Object';
    map {
        my $method = "${pkg}::$_";
        my $code = _get_accessor_for($_); 
        { no strict 'refs'; *$method = $code; }
    } @_;
    return 1;
}
sub _get_accessor_for {
    my ($key) = @_;
    return unless caller eq __PACKAGE__;	
    defined $key and !ref $key and $key =~ /^[^\W\d]\w*\z/s or croak("Invalid accessor name '$key'");
    sub {
        my ($self, $v) = @_;
        $self->{$key} = $v if defined $v;
        $self->{$key};
    };
}
sub new {
    my $class = shift;
    bless { @_ }, $class;
}
</pre>

===
<h2>Extreme performance with Class::XSAccessor</h2>
<table>
<tr><td><img src="/images/c-library.jpg" width=150>
<td>
<ul>
<li> <i>Fast</i> read & write
<li> provide accessors, getters, setters and predicates
<li> use Devel::PPPort Perl Pollution Portability
</ul>
</table>
<pre class="prettyprint" style="font-size: 25px;">
package SuperFast;
use Class::XSAccessor
    replace     => 1,
    constructor => 'new',
    accessors => {
        speed => 'speed',
    },
    predicates => {
        has_speed => 'speed',
};

package main;
my $o = SuperFast->new(speed => 'flash');

is($o->speed, 'flash');
$o->speed('max') and say $o->speed;
is($o->speed, 'max');
</pre>

===
<h2>When we should not choose object ?</h2>

<table>
<tr><td>
<img src="/images/performance.jpg" style="padding: 20px;">
<td>
<div>
<ul>
<li> performance ?
<li> difficult to learn ?
<li> need to create too many objects ?
<li> do not like abstraction ?
</ul>
</div>
</table>
<p><p>
<i>"Premature optimization is the root of all evil"</i> 
<br> Tony Hoare

===

<h2>Performance problems ?</h2> 

<table>
<tr><td>
<img src="/images/problem-solution.jpg" width=450>
<td>
1/ Analyze the origin of the problem 
<ul>
<li> waiting for database
<li> waiting for IO
<li> CPU usage
<li> Memory usage
<li> ....
</ul>

2/ then apply the correct solution
<ul>
<li> use parallel algorithm
<li> use poe
<li> do not use object
<li> ...
</ul>
</table>
===
<h2>Benchmarking</h2>

<img src="/images/Perl-Object.png">
<pre>
Mouse            : best average solution ( also consider Moo )  
Object::Tiny::XS : performance
fields           : when many update and few object creation needed
</pre>

=== 

<h2>Common Errors & Tricks :</h2>
<table>
<tr><td><img src="/images/tricks.gif" width="250">
<td>
<ul>
<li> make Moose package immutable
<pre class="prettyprint" style="font-size: 30px; padding:0px; margin:0px;">
no Moose;
__PACKAGE__->meta->make_immutable();
</pre>
<li> object creation is time consuming : 
<pre class="prettyprint" style="font-size: 30px; padding:0px; margin:0px;">
use cache or singleton if possible
</pre>
<li> use factory for abstraction
<li> fields use Hash::Util::Lock, unactivate it or change
<pre class="prettyprint" style="font-size: 30px; padding:0px; margin:0px;">
# only if too many creations 
</pre>
<li> be careful with Time syscall, try to share it : 
<pre class="prettyprint" style="font-size: 30px; padding:0px; margin:0px;">
my $now = Datetime->now();</pre>
<li> be careful with coercion
<pre class="prettyprint" style="font-size: 30px; padding:0px; margin:0px;"># do not try to do too much
~ /black mag/ic</pre>
</ul>
</table>
===
<h2>Thanks</h2>

<img src="/images/final.jpg" style="padding:30px;">
<p>
nicolas.rochelemagne@cpanel.net
<br>
<div style="float: right; padding: 100px 50px 20px 20px; font-size: 25px;">
<i>slides powered by Dancer Broadway app</i>
</div>
